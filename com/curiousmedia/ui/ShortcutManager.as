package com.curiousmedia.ui{	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;		/**	 * A singleton class to manage keyboard shortcuts in a Flash Movie.  	 * @author Doug McCluer	 * 	 */		public class ShortcutManager extends EventDispatcher	{		/**		 *indicates whether or not the Alt (Option) key is currently pressed 		 */				public var altPressed:Boolean = false;				/**		 *indicates whether or not the Shift key is currently pressed 		 */			public var shiftPressed:Boolean = false;				/**		 *indicates whether or not the Ctrl (Cmd) key is currently pressed.  		 * Note: not reliable 		 */			public var ctrlPressed:Boolean = false;					private var _pressedKeys:Array;			//the currently pressed keys		private var _shortcuts:Array;			//array of Shortcuts		private var _stageRef:Stage;				//reference to the stage (for adding event listeners )		private static const _instance:ShortcutManager = new ShortcutManager(SingletonLock );						/**		 * @private		 */		public function ShortcutManager(lock:Class)		{			if(lock != SingletonLock)			{				throw new Error("Invalid access of singleton class ShortcutManager.  Use ShortcutManager.getInstance() to instantiate class.");			}			_shortcuts = new Array();			_pressedKeys = new Array();		}						/**		 * @return a reference to the ShortcutManager class. 		 */		public static function getInstance():ShortcutManager		{			return _instance;		}				/**		 *  a reference to the stage.  This property must be set in order for Shortcut Manager to detect key presses.		 */		public function set stageRef(stageReference:Stage):void		{			if(_stageRef)			{				_stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				_stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			}			_stageRef = stageReference;			_stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, false, 0, true);			_stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler, false, 0, true);		}				public function createShortcut(label:String, targetFunction:Function, 									   ctrlKey:Boolean, altKey:Boolean, shiftKey:Boolean, 									   keyCombo:Array = null,buttonRef:DisplayObject = null):Shortcut		{			var cut:Shortcut = new Shortcut(label, targetFunction, ctrlKey, altKey, shiftKey, keyCombo, buttonRef);						deleteByComboString(cut.comboString);			_shortcuts.push(cut);						return cut;		}				/**		 * 		 * @return Array of keyCodes for the currently pressed keys.  		 * 	Note: does not include modifier keys.  Use altPressed, CtrlPressed, and ShiftPressed to check modifier keys.		 * 		 */				public function get pressedKeys():Array		{			return _pressedKeys.concat();		}				/**		 * Array of Shortcut objects currently managed by ShortcutManager		 */		public function get shortcuts():Array		{			return _shortcuts;		}		public function set shortcuts(shortcutArray:Array):void		{			_shortcuts = shortcutArray;		}						/**		 * delete all keyboard shortcuts that call the given function. 		 * 		 * @param func		 * 	the function 		 */		public function deleteByFunction(func:Function):void		{			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.targetFunction == func)				{					_shortcuts.splice(i,1);				}			}		}						/**		 * delete the shortcut that has the given comboString. 		 * 		 * @param comboString		 * 	a comboString from a shortcut		 */		public function deleteByComboString(comboString:String):void		{			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.comboString == comboString)				{					_shortcuts.splice(i,1);				}			}		}								/**		 * delete the shortcut that has the given label. 		 * 		 * @param label		 * 	a label from the shortcut		 */		public function deleteByLabel(label:String):void		{			var returnVal:Shortcut = null;			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.label == label)				{					_shortcuts.splice(i,1);				}			}		}						/**		 * get all shortcuts that have the given function as its targetFunction. 		 * 		 * @return Array of Shortcuts that have func as their targetFunction		 */		public function getShortcutsByFunction(func:Function):Array		{			var returnVal:Array = new Array;			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.targetFunction == func)				{					returnVal.push(cut);				}			}			return returnVal;		}				/**		 * get Shortcut by its label 		 * 		 * @param label		 * 	a String		 */		public function getShortcutByLabel(label:String):Shortcut		{			var returnVal:Shortcut = null;			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.label == label)				{					returnVal = cut;					break;				}			}			return returnVal;		}				/**		 * get Shortcut by its ComboString 		 * 		 * @param comboString		 * 	a String		 */		public function getShortcutByComboString(comboString:String):Shortcut		{			var returnVal:Shortcut = null;			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if(cut.comboString == comboString)				{					returnVal = cut;					break;				}			}			return returnVal;		}				/**		 * get Shortcut by its keys 		 * 		 * @param ctrl		 * @param alt		 * @param shift		 * @param keyCombo		 * 	Array of keyCodes to search for		 * 		 * @return the Shortcut specified by the input parameters, or null if no matching Shortcut is found		 */		public function getShortcutByKeys(ctr:Boolean, alt:Boolean, shift:Boolean, keyCombo:Array=null ):Shortcut		{			var returnVal:Shortcut = null;			for(var i:int=0; i < _shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i] as Shortcut;				if( (cut.ctrlKey == ctr) &&					(cut.altKey == alt) &&					(cut.shiftKey == shift) &&					(cut.keys.toString() == keyCombo.toString()) )				{					returnVal = cut;					break;				}			}			return returnVal;		}				private function keyDownHandler(e:KeyboardEvent):void		{			checkModifiers(e);			if( ( e.keyCode != 17 ) && (e.keyCode != 16) && (e.keyCode!=18) )			{				for(var i:int=0; i<_pressedKeys.length; i++)				{					if(_pressedKeys[i] == e.keyCode)					{						_pressedKeys.splice(i,1);					}				}				_pressedKeys.push(e.keyCode);				_pressedKeys.sort(Array.NUMERIC);			}			var cut:Shortcut = new Shortcut("temp", null, ctrlPressed, altPressed, shiftPressed, _pressedKeys);			var invokedShortcut:Shortcut = getShortcutByKeys(cut.ctrlKey, cut.altKey, cut.shiftKey, cut.keys);			if(invokedShortcut)			{				if (invokedShortcut.buttonRef)				{					invokedShortcut.targetFunction(invokedShortcut.buttonRef);				}else{					invokedShortcut.targetFunction();				}			}			dispatchEvent(new Event(Event.CHANGE, true, true));		}				private function keyUpHandler(e:KeyboardEvent):void		{			checkModifiers(e);			for(var i:int=0; i<_pressedKeys.length; i++)			{				if(_pressedKeys[i] == e.keyCode)				{					_pressedKeys.splice(i,1);				}			}			dispatchEvent(new Event(Event.CHANGE, true, true));		}				private function checkModifiers(e:KeyboardEvent):void		{			altPressed = e.altKey;			ctrlPressed = e.ctrlKey;			shiftPressed = e.shiftKey;		}				override public function toString():String		{			var outString:String = "ShortcutManager: " + _shortcuts.length + " shortcuts \n";			for(var i:int=0; i<_shortcuts.length; i++)			{				var cut:Shortcut = _shortcuts[i];				outString += cut.label + " - " + cut.comboString + "\n";			}			outString += "------------------";			return outString;		}		} //END class	} //END package////////////////////////////////////////////////////////////////////////////////////////////class SingletonLock/*private lock class to allow Singleton pattern*/{}//END class